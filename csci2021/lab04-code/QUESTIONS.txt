                           __________________

                            LAB 05 QUESTIONS
                           __________________


- Name: (Jerry Wu)
- NetID: (wu000169)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: C Bit Operations in Collatz
======================================

  Examine the program collatz.c which performs a similar computation to
  a Lab01 code except that this version uses bitwise operations in the
  function collatz_bitwise().  Examine the locations labeled with
  comments and shown below and describe the equivalent "normal"
  arithmetic that is happening at each postion.


A
~

  ,----
  |   int neg_mask = 0x1 << 31;     // A Makes a value that's all 0 to compare with n (using union)
  |   if(n & neg_mask){             // A Checks if n is less than 1
  |     return -1;
  |   }
  `----


B
~

  ,----
  |     if(n & 0x1){                // B If n is equal to 1
  |       ...
  |     }
  |     else{
  |       ...
  |     }
  `----


C
~

  ,----
  |       n = ((n << 2) - n) + 1;   // C Multiply n by 3, add 1
  `----


D
~

  ,----
  |       n = n >> 1;               // D Divide n by 2
  `----


PROBLEM 2: C Union and Float Bits
=================================

A
~

  Compile and run union.c to see what floating point value is printed by
  the lines.
  ,----
  |   flint.in = 0xC378C000;        // assign an int value
  |   printf("%.4f\n",flint.fl);    // print as a float value
  `----
  Show the float value and explain why it has a well-defined value
  despite no assignment of `flint.fl = ...;' appearing.

  -248.7500
  The value of 0xC378C000 corresponds to the float value of -248.7500

B
~

  The subsequent loop
  ,----
  |   flint.in = 0xC378C000;        // assign an int value
  |   ...
  |   for(int i=0; i<4; i++){       // print chars individually
  |     unsigned char c = flint.ch[i];
  |     printf("%d: %02x '%c'\n", i,c,c);
  |   }
  `----
  prints values of the bytes associated with `flint' as chars and
  hexadecimal numbers.  Show its output and explain why the hex digits
  appear in a different order from the constant flint is set to
  initially.

  0: 00 ' '
  1: c0 ''
  2: 78 'x'
  3: c3 ''

  The hex values are in a different order because of the little endian way the data is stored

C
~

  The lines
  ,----
  |   flint.in = flint.in | 0x80000000;      // bitwise or of a specific bit
  |   printf("%.4f\n",flint.fl);             // print as a float value
  `----
  modify flint again. Show the resulting floating point output and
  describe why it has the shown value.

  -248.7500 Because 0x80000000 has a 1 in the first digit and all 0s, the union will keep the rest of the number the same,
  since 0xC378C000 also has 1 in the first digit, it remains unchanged.

PROBLEM 3: GDB
==============

A debug_scramble.c
~~~~~~~~~~~~~~~~~~

  The file debug_scramble.c has a short problem which requires the
  correct number to be given as a command line argument. An array is
  filled with values and then scrambled. The command line must
  correspond to the "positive" response. Due to the array scrambling it
  is not apparent from the source code which array location contains the
  positive response.

  Use the debugger to determine the location the positive response.  For
  each of the steps below, write the commands to issue to do the items
  listed.
  1. Compile debug_scramble.c with debug symbols turned on
  2. Start gdb with the resulting program
  3. Set the arguments of the program to just 0
  4. Set a breakpoint at a line in debug_scramble.c after the scramble
     loop
  5. Run the program
  6. Print out the array after stopping at the breakpoint
  7. Locate the positive response
  8. Change the program arguments so that it is the correct index
  9. Re-run the program and continue to the end

  index = 10

B debug_long.c
~~~~~~~~~~~~~~

  The file debug_long.c has another short debugging problem.  It
  requires an input string which is interpreted similarly to a
  demonstration code at the top of code.  The correct input will elicit
  the affirmative response.

  To determine the correct input take the following approach.
  1. Break after setting the variable `lng' to its large, mysterious
     value
  2. Print the bytes of long NOT as a number but interpreted as an array
     of characters (string). This can be done in `gdb' by coercing the
     types as in:
     ,----
     | print (char []) varname
     `----
  3. This should shed light on the correct input.
 "Sweet!"
